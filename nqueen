pip install networkx
import networkx as nx
network=nx.Graph()
print("this is ans of graph")
nx.draw_networkx(network,with_labels=True)
network.add_nodes_from([4,5,6,7])
network.add_edge(1,4)
network.add_edge(1,5)
network.add_edge(2,4)
network.add_edge(3,5)
network.add_edge(5,6)
network.add_edge(7,3)
network.add_edge(7,6)
color_list = ["gold", "red", "violet", "red",
              "limegreen", "limegreen", "darkorange"]
nx.draw_networkx(network,node_color=color_list, with_labels=True)






global N
N = 4

def printSolution(board):
    for i in range(N):
        for j in range(N):
            print (board[i][j], end = " ")
        print()

def isSafe(board, row, col):
 
    for i in range(col):
        if board[row][i] == 1:
            return False
 
    for i, j in zip(range(row, -1, -1),
                    range(col, -1, -1)):
        if board[i][j] == 1:
            return False
 
    for i, j in zip(range(row, N, 1),
                    range(col, -1, -1)):
        if board[i][j] == 1:
            return False
 
    return True
 
def solveNQUtil(board, col):
     
    # base case: If all queens are placed
    # then return true
    if col >= N:
        return True
 
    for i in range(N):
 
        if isSafe(board, i, col):
             
            board[i][col] = 1
 
            if solveNQUtil(board, col + 1) == True:
                return True
 
            board[i][col] = 0
 
    # if the queen can not be placed in any row in
    # this column col then return false
    return False
 
def solveNQ():
    board = [ [0, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0] ]
 
    if solveNQUtil(board, 0) == False:
        print ("Solution does not exist")
        return False
 
    printSolution(board)
    return True
